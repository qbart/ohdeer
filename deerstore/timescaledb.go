package deerstore

import (
	"context"
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
	"github.com/qbart/ohdeer/deer"
)

type TimescaleDB struct {
	db       *sql.DB
	inserter *sql.Stmt
}

func NewTimescaleDB(ctx context.Context, connUri string) (*TimescaleDB, error) {
	db, err := sql.Open("postgres", connUri)
	if err != nil {
		return nil, fmt.Errorf("DB error: %v\n", err)
	}
	inserter, err := db.Prepare(
		`INSERT INTO metrics(monitor_id, service_id, at, success, details) VALUES ($1, $2, $3, $4, $5)`,
	)
	if err != nil {
		db.Close()
		return nil, err
	}

	return &TimescaleDB{
		db:       db,
		inserter: inserter,
	}, nil
}

func (m *TimescaleDB) Init(ctx context.Context) error {
	sql := `
	CREATE TABLE IF NOT EXISTS metrics(
	  id         bigint        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	  monitor_id varchar       NOT NULL,
	  service_id varchar       NOT NULL,
	  at         timestamptz   NOT NULL,
	  success    bool          NOT NULL DEFAULT false,
	  details    jsonb
	);
	`
	_, err := m.db.Exec(sql)

	if err != nil {
		return err
	}

	return nil
}

func (m *TimescaleDB) Close(ctx context.Context) {
	m.inserter.Close()
	m.db.Close()
}

func (m *TimescaleDB) Save(ctx context.Context, result *deer.CheckResult) {
	m.inserter.Exec(
		result.MonitorID,
		result.ServiceID,
		result.At,
		result.Success,
		"{}",
	)
}
